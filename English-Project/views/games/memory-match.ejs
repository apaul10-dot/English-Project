<%- include('../partials/header') %>

<div class="game-container">
    <div class="game-header">
        <h1>Memory Match: Food Waste Edition</h1>
        <p class="game-description">Match pairs of cards to learn about food waste and sustainability. Find all pairs to complete the game!</p>
        
        <div class="game-stats">
            <div class="stat-box">
                <span class="stat-label">Moves</span>
                <span class="stat-value" id="moves">0</span>
            </div>
            <div class="stat-box">
                <span class="stat-label">Time</span>
                <span class="stat-value" id="timer">0:00</span>
            </div>
            <div class="stat-box">
                <span class="stat-label">Best Score</span>
                <span class="stat-value" id="best-score">-</span>
            </div>
        </div>
        
        <button id="start-game" class="btn btn-primary">Start New Game</button>
    </div>

    <div class="memory-grid" id="game-board"></div>

    <div id="game-complete" class="modal">
        <div class="modal-content">
            <h2>Congratulations! üéâ</h2>
            <div class="completion-stats">
                <p>You completed the game in <span id="final-moves">0</span> moves</p>
                <p>Time taken: <span id="final-time">0:00</span></p>
            </div>
            <button class="btn btn-primary" onclick="startNewGame()">Play Again</button>
        </div>
    </div>
</div>

<style>
.game-container {
    max-width: 1200px;
    margin: 100px auto 40px;
    padding: 0 20px;
}

.game-header {
    text-align: center;
    margin-bottom: 2rem;
}

.game-description {
    max-width: 600px;
    margin: 1rem auto;
    color: var(--text-light);
}

.game-stats {
    display: flex;
    justify-content: center;
    gap: 2rem;
    margin: 2rem 0;
}

.stat-box {
    background: var(--white);
    padding: 1rem 2rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    text-align: center;
}

.stat-label {
    display: block;
    font-size: 0.9rem;
    color: var(--text-light);
    margin-bottom: 0.5rem;
}

.stat-value {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--primary-color);
}

.memory-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 1rem;
    max-width: 800px;
    margin: 0 auto;
    perspective: 1000px;
}

.memory-card {
    aspect-ratio: 3/4;
    position: relative;
    transform-style: preserve-3d;
    transition: transform 0.6s;
    cursor: pointer;
}

.memory-card.flipped {
    transform: rotateY(180deg);
}

.memory-card.matched {
    transform: rotateY(180deg);
    cursor: default;
}

.card-front,
.card-back {
    position: absolute;
    width: 100%;
    height: 100%;
    padding: 1rem;
    backface-visibility: hidden;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
    font-weight: 500;
}

.card-front {
    background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
    color: white;
    transform: rotateY(180deg);
}

.card-back {
    background: linear-gradient(135deg, #e0e0e0, #f5f5f5);
    border: 2px solid #ddd;
}

.card-icon {
    width: 60%;
    height: 60%;
    object-fit: contain;
}

.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    z-index: 1000;
    align-items: center;
    justify-content: center;
}

.modal-content {
    background: var(--white);
    padding: 2rem;
    border-radius: 12px;
    text-align: center;
    max-width: 400px;
    width: 90%;
}

.completion-stats {
    margin: 1.5rem 0;
    font-size: 1.1rem;
}

.completion-stats p {
    margin: 0.5rem 0;
    color: var(--text-light);
}

.completion-stats span {
    color: var(--primary-color);
    font-weight: 600;
}

@media (max-width: 768px) {
    .memory-grid {
        grid-template-columns: repeat(3, 1fr);
        gap: 0.8rem;
    }

    .game-stats {
        flex-wrap: wrap;
        gap: 1rem;
    }

    .stat-box {
        flex: 1 1 calc(33.333% - 1rem);
        padding: 0.8rem;
    }
}

@media (max-width: 480px) {
    .memory-grid {
        grid-template-columns: repeat(2, 1fr);
    }

    .stat-box {
        flex: 1 1 calc(50% - 1rem);
    }
}
</style>

<script>
const cards = [
    { id: 1, icon: 'ü•¨', fact: 'Leafy greens last longer in airtight containers' },
    { id: 2, icon: 'üçé', fact: 'Store apples away from other produce' },
    { id: 3, icon: 'ü•ï', fact: 'Carrots stay crisp in water' },
    { id: 4, icon: 'ü•ë', fact: 'Ripe avocados can be refrigerated' },
    { id: 5, icon: 'üçå', fact: 'Bananas release ethylene gas' },
    { id: 6, icon: 'ü•î', fact: 'Store potatoes in a dark, cool place' },
    { id: 7, icon: 'üçÖ', fact: 'Don\'t refrigerate tomatoes' },
    { id: 8, icon: 'ü•¶', fact: 'Broccoli needs air circulation' }
];

let flippedCards = [];
let matchedPairs = 0;
let moves = 0;
let gameStarted = false;
let gameTimer;
let startTime;

function createCard(card) {
    const cardElement = document.createElement('div');
    cardElement.className = 'memory-card';
    cardElement.dataset.id = card.id;
    
    cardElement.innerHTML = `
        <div class="card-front">
            <div>
                <div style="font-size: 3rem; margin-bottom: 0.5rem;">${card.icon}</div>
                <div style="font-size: 0.8rem; padding: 0 0.5rem;">${card.fact}</div>
            </div>
        </div>
        <div class="card-back">
            <img src="/images/card-back.svg" alt="Card back" class="card-icon">
        </div>
    `;
    
    cardElement.addEventListener('click', () => flipCard(cardElement));
    return cardElement;
}

function startNewGame() {
    const gameBoard = document.getElementById('game-board');
    gameBoard.innerHTML = '';
    
    // Reset game state
    flippedCards = [];
    matchedPairs = 0;
    moves = 0;
    document.getElementById('moves').textContent = '0';
    document.getElementById('timer').textContent = '0:00';
    document.getElementById('game-complete').style.display = 'none';
    
    // Create and shuffle cards
    const gameCards = [...cards, ...cards]
        .sort(() => Math.random() - 0.5)
        .map(card => createCard(card));
    
    gameCards.forEach(card => gameBoard.appendChild(card));
    
    // Start timer
    startTime = Date.now();
    if (gameTimer) clearInterval(gameTimer);
    gameTimer = setInterval(updateTimer, 1000);
    gameStarted = true;
}

function flipCard(card) {
    if (!gameStarted || flippedCards.length >= 2 || card.classList.contains('flipped') || 
        card.classList.contains('matched')) {
        return;
    }
    
    card.classList.add('flipped');
    flippedCards.push(card);
    
    if (flippedCards.length === 2) {
        moves++;
        document.getElementById('moves').textContent = moves;
        checkMatch();
    }
}

function checkMatch() {
    const [card1, card2] = flippedCards;
    const match = card1.dataset.id === card2.dataset.id;
    
    if (match) {
        card1.classList.add('matched');
        card2.classList.add('matched');
        matchedPairs++;
        
        if (matchedPairs === cards.length) {
            endGame();
        }
    } else {
        setTimeout(() => {
            card1.classList.remove('flipped');
            card2.classList.remove('flipped');
        }, 1000);
    }
    
    flippedCards = [];
}

function updateTimer() {
    const elapsed = Math.floor((Date.now() - startTime) / 1000);
    const minutes = Math.floor(elapsed / 60);
    const seconds = elapsed % 60;
    document.getElementById('timer').textContent = 
        `${minutes}:${seconds.toString().padStart(2, '0')}`;
}

function endGame() {
    clearInterval(gameTimer);
    gameStarted = false;
    
    const finalTime = document.getElementById('timer').textContent;
    document.getElementById('final-moves').textContent = moves;
    document.getElementById('final-time').textContent = finalTime;
    
    // Update best score
    const currentBest = localStorage.getItem('memoryBestScore');
    if (!currentBest || moves < parseInt(currentBest)) {
        localStorage.setItem('memoryBestScore', moves);
        document.getElementById('best-score').textContent = moves;
    }
    
    document.getElementById('game-complete').style.display = 'flex';
}

// Initialize game
document.getElementById('start-game').addEventListener('click', startNewGame);
document.getElementById('best-score').textContent = 
    localStorage.getItem('memoryBestScore') || '-';
</script>

<%- include('../partials/footer') %> 