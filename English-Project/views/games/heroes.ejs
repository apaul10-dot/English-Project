<%- include('../partials/header') %>

<div class="game-container">
    <h1>Food Waste Heroes</h1>
    <p class="game-description">Help the Food Waste Hero collect and save food items! Use arrow keys or WASD to move, and spacebar to jump.</p>
    
    <div class="game-stats">
        <div class="stat">
            <span>Score:</span>
            <span id="score">0</span>
        </div>
        <div class="stat">
            <span>Food Saved:</span>
            <span id="items-collected">0</span>
        </div>
        <div class="stat">
            <span>Time:</span>
            <span id="timer">60</span>s
        </div>
    </div>
    
    <canvas id="gameCanvas"></canvas>
    
    <div class="game-controls">
        <button id="start-btn">Start Game</button>
        <button id="restart-btn" class="hidden">Play Again</button>
    </div>
    
    <div id="game-over" class="game-over hidden">
        <div class="game-over-content">
            <h2>Game Over!</h2>
            <p>You saved <span id="final-items">0</span> food items</p>
            <p>Final Score: <span id="final-score">0</span></p>
            <div id="achievement-message"></div>
            <button onclick="restartGame()">Play Again</button>
        </div>
    </div>
</div>

<style>
.game-container {
    max-width: 800px;
    margin: 100px auto 40px;
    padding: 20px;
    text-align: center;
}

.game-description {
    color: #666;
    margin-bottom: 30px;
}

.game-stats {
    display: flex;
    justify-content: center;
    gap: 30px;
    margin-bottom: 20px;
}

.stat {
    background: white;
    padding: 10px 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    display: flex;
    gap: 10px;
    align-items: center;
}

#gameCanvas {
    background: #e8f0fe;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
}

.game-controls button {
    padding: 10px 20px;
    background: #1a73e8;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 500;
    transition: background 0.3s;
    margin: 0 10px;
}

.game-controls button:hover {
    background: #1557b0;
}

.game-over {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
}

.game-over.hidden {
    display: none;
}

.game-over-content {
    background: white;
    padding: 30px;
    border-radius: 12px;
    text-align: center;
}

.game-over-content h2 {
    color: #1a73e8;
    margin-bottom: 20px;
}

.game-over-content button {
    margin-top: 20px;
    padding: 10px 20px;
    background: #1a73e8;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 500;
    transition: background 0.3s;
}

.game-over-content button:hover {
    background: #1557b0;
}

#achievement-message {
    margin: 15px 0;
    padding: 10px;
    border-radius: 6px;
    font-weight: 500;
}

.hidden {
    display: none;
}

@media (max-width: 768px) {
    .game-container {
        padding: 10px;
    }
    
    .game-stats {
        flex-direction: column;
        gap: 10px;
    }
    
    .stat {
        width: 100%;
        justify-content: center;
    }
}
</style>

<script>
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// Set canvas size
canvas.width = 800;
canvas.height = 400;

// Game variables
let player = {
    x: 50,
    y: canvas.height - 50,
    width: 30,
    height: 30,
    speed: 5,
    jumpForce: -12,
    velocityY: 0,
    isJumping: false
};

let foodItems = [];
let platforms = [];
let score = 0;
let itemsCollected = 0;
let timeLeft = 60;
let gameInterval = null;
let timerInterval = null;
let isGameRunning = false;

const gravity = 0.5;
const foodTypes = [
    { name: 'Apple', color: '#ff6b6b', points: 10 },
    { name: 'Banana', color: '#ffd93d', points: 15 },
    { name: 'Carrot', color: '#ff9f43', points: 20 },
    { name: 'Bread', color: '#c0a080', points: 25 }
];

// Initialize platforms
function initializePlatforms() {
    platforms = [
        { x: 0, y: canvas.height - 20, width: canvas.width, height: 20 },
        { x: 200, y: canvas.height - 120, width: 100, height: 20 },
        { x: 400, y: canvas.height - 200, width: 100, height: 20 },
        { x: 600, y: canvas.height - 150, width: 100, height: 20 }
    ];
}

// Generate random food item
function generateFoodItem() {
    const foodType = foodTypes[Math.floor(Math.random() * foodTypes.length)];
    return {
        x: Math.random() * (canvas.width - 20),
        y: Math.random() * (canvas.height - 100),
        width: 20,
        height: 20,
        type: foodType,
        velocityY: 0
    };
}

// Add new food items periodically
function addFoodItem() {
    if (foodItems.length < 5) {
        foodItems.push(generateFoodItem());
    }
}

// Check collision between two rectangles
function checkCollision(rect1, rect2) {
    return rect1.x < rect2.x + rect2.width &&
           rect1.x + rect1.width > rect2.x &&
           rect1.y < rect2.y + rect2.height &&
           rect1.y + rect1.height > rect2.y;
}

// Update game state
function update() {
    // Apply gravity to player
    player.velocityY += gravity;
    player.y += player.velocityY;
    
    // Check platform collisions
    platforms.forEach(platform => {
        if (checkCollision(player, platform) && player.velocityY > 0) {
            player.y = platform.y - player.height;
            player.velocityY = 0;
            player.isJumping = false;
        }
    });
    
    // Keep player in bounds
    if (player.x < 0) player.x = 0;
    if (player.x + player.width > canvas.width) player.x = canvas.width - player.width;
    if (player.y + player.height > canvas.height) {
        player.y = canvas.height - player.height;
        player.velocityY = 0;
        player.isJumping = false;
    }
    
    // Update food items
    foodItems.forEach((food, index) => {
        food.velocityY += gravity * 0.2;
        food.y += food.velocityY;
        
        // Check platform collisions for food
        platforms.forEach(platform => {
            if (checkCollision(food, platform)) {
                food.y = platform.y - food.height;
                food.velocityY = 0;
            }
        });
        
        // Check if player collected food
        if (checkCollision(player, food)) {
            score += food.type.points;
            itemsCollected++;
            document.getElementById('score').textContent = score;
            document.getElementById('items-collected').textContent = itemsCollected;
            foodItems.splice(index, 1);
        }
    });
}

// Draw game elements
function draw() {
    // Clear canvas
    ctx.fillStyle = '#e8f0fe';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // Draw platforms
    ctx.fillStyle = '#1a73e8';
    platforms.forEach(platform => {
        ctx.fillRect(platform.x, platform.y, platform.width, platform.height);
    });
    
    // Draw player
    ctx.fillStyle = '#28a745';
    ctx.fillRect(player.x, player.y, player.width, player.height);
    
    // Draw food items
    foodItems.forEach(food => {
        ctx.fillStyle = food.type.color;
        ctx.fillRect(food.x, food.y, food.width, food.height);
    });
}

// Game loop
function gameLoop() {
    if (!isGameRunning) return;
    
    update();
    draw();
    
    if (Math.random() < 0.02) {
        addFoodItem();
    }
}

// Handle keyboard input
const keys = {};
document.addEventListener('keydown', e => {
    keys[e.key] = true;
    
    if ((e.key === ' ' || e.key === 'ArrowUp' || e.key === 'w') && !player.isJumping) {
        player.velocityY = player.jumpForce;
        player.isJumping = true;
    }
});

document.addEventListener('keyup', e => {
    keys[e.key] = false;
});

// Movement update
setInterval(() => {
    if (!isGameRunning) return;
    
    if (keys['ArrowLeft'] || keys['a']) player.x -= player.speed;
    if (keys['ArrowRight'] || keys['d']) player.x += player.speed;
}, 1000 / 60);

// Start game
function startGame() {
    isGameRunning = true;
    score = 0;
    itemsCollected = 0;
    timeLeft = 60;
    foodItems = [];
    
    document.getElementById('score').textContent = '0';
    document.getElementById('items-collected').textContent = '0';
    document.getElementById('timer').textContent = timeLeft;
    document.getElementById('start-btn').classList.add('hidden');
    document.getElementById('restart-btn').classList.add('hidden');
    document.getElementById('game-over').classList.add('hidden');
    
    player.x = 50;
    player.y = canvas.height - 50;
    player.velocityY = 0;
    
    initializePlatforms();
    
    if (gameInterval) clearInterval(gameInterval);
    if (timerInterval) clearInterval(timerInterval);
    
    gameInterval = setInterval(gameLoop, 1000 / 60);
    timerInterval = setInterval(() => {
        timeLeft--;
        document.getElementById('timer').textContent = timeLeft;
        
        if (timeLeft <= 0) {
            endGame();
        }
    }, 1000);
}

// End game
function endGame() {
    isGameRunning = false;
    clearInterval(gameInterval);
    clearInterval(timerInterval);
    
    document.getElementById('final-score').textContent = score;
    document.getElementById('final-items').textContent = itemsCollected;
    document.getElementById('restart-btn').classList.remove('hidden');
    
    const achievementMessage = document.getElementById('achievement-message');
    let message = '';
    let color = '';
    
    if (score >= 500) {
        message = "Amazing! You're a Food Waste Prevention Champion!";
        color = '#28a745';
    } else if (score >= 300) {
        message = "Great job! You're making a real difference!";
        color = '#17a2b8';
    } else if (score >= 100) {
        message = "Good start! Keep fighting food waste!";
        color = '#ffc107';
    } else {
        message = "Keep practicing to save more food!";
        color = '#dc3545';
    }
    
    achievementMessage.textContent = message;
    achievementMessage.style.backgroundColor = color + '20';
    achievementMessage.style.color = color;
    
    document.getElementById('game-over').classList.remove('hidden');
}

// Restart game
function restartGame() {
    startGame();
}

// Event listeners
document.getElementById('start-btn').addEventListener('click', startGame);
document.getElementById('restart-btn').addEventListener('click', restartGame);

// Initialize the game
initializePlatforms();
draw();
</script>

<%- include('../partials/footer') %> 